#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/34.h"

#define DEF 0
#define LSYM 1
#define RSYM 2
#define NAV 3
#define I3 4
#define BLUET 5
#define NUM 6

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH1 LH0 RH0 RH1                                              // thumb keys

/* left-hand text HRMs */
ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <400>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <50>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* left-hand slow HRMs */
ZMK_HOLD_TAP(shml,
    flavor = "balanced";
    tapping-term-ms = <300>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <280>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand text HRMs */
ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <400>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <50>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand slow HRMs */
ZMK_HOLD_TAP(shmr,
    flavor = "balanced";
    tapping-term-ms = <300>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <280>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* Hold - tab repeat */
ZMK_HOLD_TAP(lrep,
    flavor = "balanced";
    tapping-term-ms = <150>;
    quick-tap-ms = <80>;
    require-prior-idle-ms = <200>;
    bindings = <&mo>, <&key_repeat>;
)


&num_word {
  continue-list = <X MINUS DEL BSPC>;
};

/ {
    combos {
        compatible = "zmk,combos";

        q {
            bindings = <&kp Q>;
            key-positions = <3 2>;
            layers = <DEF>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <3 4>;
            layers = <DEF>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <1 2>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <8 9>;
            layers = <DEF>;
        };

        lock {
            bindings = <&kp RG(PAUSE_BREAK)>;
            key-positions = <0 1 8 9>;
            layers = <DEF>;
        };

        symbolReturn {
            bindings = <&kp RETURN>;
            key-positions = <17 18>;
            layers = <LSYM>;
        };

        symbolSpace {
            bindings = <&kp SPACE>;
            key-positions = <11 12>;
            layers = <RSYM>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <10 1>;
            layers = <DEF>;
        };

        apostrophe {
            bindings = <&kp SQT>;
            key-positions = <7 8>;
            layers = <ALL>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <6 7>;
            layers = <ALL>;
        };

        NumWord {
            bindings = <&num_word NUM>;
            key-positions = <2 7>;
        };

        CapsWord {
            bindings = <&caps_word>;
            key-positions = <23 26>;
        };

        altDot {
            bindings = <&kp LA(DOT)>;
            key-positions = <27 28>;
            layers = <DEF>;
        };

        bluetoothLay {
            bindings = <&mo BLUET>;
            key-positions = <9 18>;
        };

        leftStickyShift {
            bindings = <&sk LSHFT>;
            key-positions = <12 24>;
            layers = <DEF>;
        };

        rightStickyShift {
            bindings = <&sk RSHFT>;
            key-positions = <17 27>;
            layers = <DEF>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Default {
            bindings = <
&none          &kp W        &kp F          &kp P             &kp B           &kp J      &kp L          &kp U           &kp Y          &none
&shml RGUI A   &hml RALT R  &shml RCTRL S  &hml RSHFT T      &kp G           &kp M      &hmr RSHIFT N  &shmr RCTRL E    &hmr RALT I    &shmr RGUI O
&kp Z          &kp X        &kp C          &kp D             &kp V           &kp K      &kp H          &kp COMMA       &kp DOT        &kp FSLH
                                         &lt NAV TAB       &lt RSYM SPACE  &lt LSYM RET  &lrep I3 0
            >;
        };

        LeftSombols {
            bindings = <
&kp LS(DLLR)   &kp LS(LBRC)  &kp LS(RBRC)  &kp LS(DQT)    &kp LS(PIPE)     &none  &none  &none  &none  &none
&kp LS(POUND)  &kp LS(LPAR)  &kp LS(RPAR)  &kp SEMI       &kp LS(TILDE)    &none  &kp N3  &kp N1  &kp N5  &kp N7
&kp LS(PRCNT)  &kp LBKT      &kp RBKT      &kp LS(CARET)  &kp BSLH         &none   &kp N9  &none  &none  &none
                                           &kp DEL        &lt RSYM SPACE   &none  &none
            >;
        };

        RightSymbols {
            bindings = <
&none   &none   &none   &none   &none         &kp LS(EXCL)  &kp LS(EXCL)  &kp LS(UNDER)  &kp LS(AT)    &none
&kp N6  &kp N4  &kp N0  &kp N2  &none         &kp LS(STAR)  &kp EQUAL     &kp LS(PIPE)   &kp LS(PLUS)  &kp MINUS
&none   &none   &none   &kp N8  &none         &kp LS(AMPS)  &kp GRAVE     &kp LS(LT)     &kp LS(GT)    &kp LS(QMARK)
                         &none  &none         &lt LSYM RET  &key_repeat
            >;
        };

        Navigation {
            bindings = <
&kp F1   &kp F2    &kp F3     &kp F4     &kp F5      &kp F6  &kp F7     &kp F8      &kp F9      &kp F10
&sk LGUI &sk LALT  &sk LCTRL  &sk LSHFT  &trans      &trans  &kp LEFT   &kp DOWN    &kp UP      &kp RIGHT
&trans   &trans    &trans     &trans     &trans      &trans  &kp HOME   &kp PG_DN   &kp PG_UP   &kp END
                              &trans     &trans      &trans  &kp K_CANCEL
            >;
        };

        i3 {
            bindings = <
&kp RG(N1)  &kp RG(N2)  &kp RG(N3)  &kp RG(N4)          &kp RG(N0)            &kp RG(F6)     &kp RG(F7)    &kp RG(F8)    &kp RG(F9)    &kp RG(F10) 
&kp RG(A)   &kp RG(R)   &kp RG(F)   &kp RG(T)  &kp RG(RS(EQUAL))     &kp RG(F1)     &none         &none         &none         &kp RG(RS(PAUSE_BREAK))
&none       &none       &none       &none               &kp RG(RS(SPACE))     &kp RG(RS(Q))  &kp RG(SLASH) &kp RG(EQUAL) &kp RG(MINUS) &kp RG(BACKSLASH)
                                    &kp RG(SPACE)       &kp RG(ENTER)         &none          &none 
            >;
        };

        bluetooth {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none  &bt BT_CLR     &none &none &none &none &none &none
&none         &none         &none         &none  &none          &none &none &none &none &none &none
&none         &none         &none         &none  &none          &none &none &none &none &none &none
                                          &none  &none          &none &none
            >;
        };

        num {
            bindings = <
         &none   &none   &none   &none   &none     &none   &none   &none       &none     &none
         &kp N6  &kp N4  &kp N0  &kp N2  &none     &none   &kp N3  &kp N1      &kp N5    &kp N7
         &none   &none   &none   &kp N8  &none     &none   &kp N9  &kp COMMA   &kp DOT   &none
                                 &none   &none     &none   &none
            >;
        };
    };
};
