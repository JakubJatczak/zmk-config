#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#define DEF 0
#define LSYM 1
#define RSYM 2
#define NAV 3
#define I3 4

layer_rep: layer_repeat {
    compatible = "zmk,behavior-hold-tap";
    label = "LAYER_HOLD_REPEAT_TAP";
    #binding cells = <1>;
    bindings = <&mo>, <&key_repeat>;
    tapping-term-ms = <200>;
}

/ {
    combos {
        compatible = "zmk,combos";

        q {
            bindings = <&kp Q>;
            key-positions = <3 2>;
            layers = <DEF>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <3 4>;
            layers = <DEF>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <1 2>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <8 19>;
            layers = <DEF>;
        };

        lock {
            bindings = <&kp RG(PAUSE_BREAK)>;
            key-positions = <10 1 8 19>;
            layers = <DEF>;
        };

        symbolReturt {
            bindings = <&kp RETURN>;
            key-positions = <17 18>;
            layers = <RSYM>;
        };

        symbolSpace {
            bindings = <&kp SPACE>;
            key-positions = <11 12>;
            layers = <LSYM>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <10 1>;
            layers = <DEF>;
        };

        apostrophe {
            bindings = <&kp SQT>;
            key-positions = <7 8>;
            layers = <ALL>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <6 7>;
            layers = <ALL>;
        };

        NumWord {
            bindings = <&none>;
            key-positions = <2 7>;
        };

        CapsWord {
            bindings = <&caps_word>;
            key-positions = <23 26>;
        };

        altDot {
            bindings = <&kp LA(DOT)>;
            key-positions = <27 28>;
            layers = <DEF>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Default {
            bindings = <
&none  &kp W  &kp F  &kp P      &kp B          &kp J      &kp L           &kp U      &kp Y    &none
&kp A  &kp R  &kp S  &kp T      &kp G          &kp M      &kp N           &kp E      &kp I    &kp O
&kp Z  &kp X  &kp C  &kp D      &kp V          &kp K      &kp H           &kp COMMA  &kp DOT  &kp FSLH
                     &lt NAV TAB  &lt RSYM SPACE    &lt LSYM RET  &layer_rep I3
            >;
        };

        LeftSombols {
            bindings = <
&kp LS(DLLR)   &kp LS(LBRC)  &kp LS(RBRC)  &kp LS(DQT)    &kp LS(PIPE)     &trans  &trans  &trans  &trans  &trans
&kp LS(POUND)  &kp LS(LPAR)  &kp LS(RPAR)  &kp SEMI       &kp LS(TILDE)    &trans  &kp N3  &kp N1  &kp N5  &kp N7
&kp LS(PRCNT)  &kp LBKT      &kp RBKT      &kp LS(CARET)  &kp BSLH         &none   &kp N9  &trans  &trans  &trans
                                           &kp DEL        &kp SPACE        &trans  &trans
            >;
        };

        RightSymbols {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp LS(EXCL)  &kp LS(EXCL)  &kp LS(UNDER)  &kp LS(AT)    &none
&kp N6  &kp N4  &kp N0  &kp N2  &trans    &kp LS(STAR)  &kp EQUAL     &kp LS(PIPE)   &kp LS(PLUS)  &kp MINUS
&none   &trans  &trans  &kp N8  &trans    &kp LS(AMPS)  &kp GRAVE     &kp LS(LT)     &kp LS(GT)    &kp LS(QMARK)
                        &trans  &trans    &kp RET       &trans
            >;
        };

        Navigation {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans    &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans    &none   &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT
&trans  &trans  &trans  &trans  &trans    &trans  &kp HOME  &kp PG_DN  &kp PG_UP  &kp END
                        &trans  &trans    &trans  &trans
            >;
        };

        i3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                        &trans  &trans    &trans  &trans
            >;
        };
    };
};
